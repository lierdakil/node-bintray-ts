"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const hasAttrs_1 = require("./hasAttrs");
const version_1 = require("./version");
class Package extends hasAttrs_1.HasAttrs {
    constructor(subject, repo, pkg, rest) {
        super(`/packages/${subject}/${repo}`, pkg, rest);
        this.subject = subject;
        this.repo = repo;
        this.pkg = pkg;
        this.version = (version = '_latest') => new version_1.Version(this.subject, this.repo, this.pkg, version, this.rest);
    }
}
exports.Package = Package;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFja2FnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW50cmF5L3BhY2thZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBcUM7QUFFckMsdUNBQW1DO0FBMkNuQyxNQUFhLE9BQVEsU0FBUSxtQkFBa0M7SUFDN0QsWUFDVSxPQUFlLEVBQ2YsSUFBWSxFQUNaLEdBQVcsRUFDbkIsSUFBVTtRQUVWLEtBQUssQ0FBQyxhQUFhLE9BQU8sSUFBSSxJQUFJLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFMeEMsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUNmLFNBQUksR0FBSixJQUFJLENBQVE7UUFDWixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBTWQsWUFBTyxHQUFHLENBQUMsT0FBTyxHQUFHLFNBQVMsRUFBRSxFQUFFLENBQ3ZDLElBQUksaUJBQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBSHBFLENBQUM7Q0FJRjtBQVpELDBCQVlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSGFzQXR0cnMgfSBmcm9tICcuL2hhc0F0dHJzJ1xuaW1wb3J0IHsgUmVzdCB9IGZyb20gJy4vcmVzdCdcbmltcG9ydCB7IFZlcnNpb24gfSBmcm9tICcuL3ZlcnNpb24nXG5cbmV4cG9ydCBpbnRlcmZhY2UgUGFja2FnZUluZm8ge1xuICBuYW1lOiBzdHJpbmdcbiAgcmVwbzogc3RyaW5nXG4gIG93bmVyOiBzdHJpbmdcbiAgZGVzYzogc3RyaW5nXG4gIGxhYmVsczogc3RyaW5nW11cbiAgYXR0cmlidXRlX25hbWVzOiBzdHJpbmdbXVxuICBsaWNlbnNlczogTGljZW5zZVtdXG4gIGN1c3RvbV9saWNlbnNlczogc3RyaW5nW11cbiAgZm9sbG93ZXJzX2NvdW50OiBudW1iZXJcbiAgY3JlYXRlZDogc3RyaW5nIC8vIElTTyBkYXRlIHN0cmluZ1xuICB3ZWJzaXRlX3VybDogc3RyaW5nXG4gIGlzc3VlX3RyYWNrZXJfdXJsOiBzdHJpbmdcbiAgZ2l0aHViX3JlcG86IHN0cmluZ1xuICBnaXRodWJfcmVsZWFzZV9ub3Rlc19maWxlOiBzdHJpbmdcbiAgcHVibGljX2Rvd25sb2FkX251bWJlcnM6IGJvb2xlYW5cbiAgcHVibGljX3N0YXRzOiBib29sZWFuXG4gIGxpbmtlZF90b19yZXBvczogc3RyaW5nW11cbiAgdmVyc2lvbnM6IHN0cmluZ1tdXG4gIGxhdGVzdF92ZXJzaW9uOiBzdHJpbmdcbiAgdXBkYXRlZDogc3RyaW5nIC8vIElTTyBkYXRlXG4gIHJhdGluZ19jb3VudDogbnVtYmVyXG4gIHN5c3RlbV9pZHM6IHN0cmluZ1tdXG4gIHZjc191cmw6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhY2thZ2VEYXRhIHtcbiAgbmFtZTogc3RyaW5nXG4gIGRlc2M/OiBzdHJpbmdcbiAgbGFiZWxzPzogc3RyaW5nW11cbiAgbGljZW5zZXM6IExpY2Vuc2VbXVxuICBjdXN0b21fbGljZW5zZXM/OiBzdHJpbmdbXVxuICB2Y3NfdXJsOiBzdHJpbmdcbiAgd2Vic2l0ZV91cmw/OiBzdHJpbmdcbiAgaXNzdWVfdHJhY2tlcl91cmw/OiBzdHJpbmdcbiAgZ2l0aHViX3JlcG8/OiBzdHJpbmdcbiAgZ2l0aHViX3JlbGVhc2Vfbm90ZXNfZmlsZT86IHN0cmluZ1xuICBwdWJsaWNfZG93bmxvYWRfbnVtYmVycz86IGJvb2xlYW5cbiAgcHVibGljX3N0YXRzPzogYm9vbGVhblxufVxuXG5leHBvcnQgY2xhc3MgUGFja2FnZSBleHRlbmRzIEhhc0F0dHJzPFBhY2thZ2VJbmZvLCBQYWNrYWdlRGF0YT4ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHN1YmplY3Q6IHN0cmluZyxcbiAgICBwcml2YXRlIHJlcG86IHN0cmluZyxcbiAgICBwcml2YXRlIHBrZzogc3RyaW5nLFxuICAgIHJlc3Q6IFJlc3QsXG4gICkge1xuICAgIHN1cGVyKGAvcGFja2FnZXMvJHtzdWJqZWN0fS8ke3JlcG99YCwgcGtnLCByZXN0KVxuICB9XG5cbiAgcHVibGljIHZlcnNpb24gPSAodmVyc2lvbiA9ICdfbGF0ZXN0JykgPT5cbiAgICBuZXcgVmVyc2lvbih0aGlzLnN1YmplY3QsIHRoaXMucmVwbywgdGhpcy5wa2csIHZlcnNpb24sIHRoaXMucmVzdClcbn1cblxuZXhwb3J0IHR5cGUgTGljZW5zZSA9XG4gIHwgJ0FGTC0zLjAnXG4gIHwgJ0FQTC0xLjAnXG4gIHwgJ0FwYWNoZS0yLjAnXG4gIHwgJ0FwYWNoZS0xLjAnXG4gIHwgJ0F0dHJpYnV0aW9uJ1xuICB8ICdCU0wtMS4wJ1xuICB8ICdDQS1UT1NMLTEuMSdcbiAgfCAnQ0RETC0xLjAnXG4gIHwgJ0NQQUwtMS4wJ1xuICB8ICdEYXknXG4gIHwgJ0RheS1BZGRlbmR1bSdcbiAgfCAnQm91bmN5LUNhc3RsZSdcbiAgfCAnRVVEQVRBR1JJRCdcbiAgfCAnQ1BMLTEuMCdcbiAgfCAnTEdQTC0yLjEnXG4gIHwgJ0xHUEwtMy4wJ1xuICB8ICdIU1FMREInXG4gIHwgJ0lCTVBMLTEuMCdcbiAgfCAnQ2VDSUxMLUInXG4gIHwgJ0NlQ0lMTC1DJ1xuICB8ICdDZUNJTEwtMidcbiAgfCAnQ2VDSUxMLTIuMSdcbiAgfCAnSVBBRm9udC0xLjAnXG4gIHwgJ0lTQydcbiAgfCAnTHVjZW50LTEuMDInXG4gIHwgJ01pck9TJ1xuICB8ICdNUy1QTCdcbiAgfCAnSkEtU0lHJ1xuICB8ICdCU0QnXG4gIHwgJ01JVCdcbiAgfCAnSlNPTidcbiAgfCAnTW90b3NvdG8tMC45LjEnXG4gIHwgJ0VQTC0xLjAnXG4gIHwgJ0VDTDInXG4gIHwgJ0VpZmZlbC0yLjAnXG4gIHwgJ0pUaWR5J1xuICB8ICdFbnRlc3NhLTEuMCdcbiAgfCAnRVVQTC0xLjEnXG4gIHwgJ0ZhaXInXG4gIHwgJ0ZyYW1ld29yeC0xLjAnXG4gIHwgJ0dQTC0yLjArQ0UnXG4gIHwgJ011bHRpY3MnXG4gIHwgJ05BU0EtMS4zJ1xuICB8ICdOVFAnXG4gIHwgJ05BVU1FTidcbiAgfCAnTmV0aGFjaydcbiAgfCAnTm9raWEtMS4wYSdcbiAgfCAnTk9TTC0zLjAnXG4gIHwgJ09DTEMtMi4wJ1xuICB8ICdPcGVuZm9udC0xLjEnXG4gIHwgJ09wZW5ncm91cCdcbiAgfCAnUEhQLTMuMCdcbiAgfCAnUG9zdGdyZVNRTCdcbiAgfCAnUHVibGljIERvbWFpbidcbiAgfCAnUHVibGljIERvbWFpbiAtIFNVTidcbiAgfCAnUHl0aG9uUEwnXG4gIHwgJ1B5dGhvblNvZnRGb3VuZGF0aW9uJ1xuICB8ICdRVFBMLTEuMCdcbiAgfCAnUmVhbC0xLjAnXG4gIHwgJ1JpY29oUEwnXG4gIHwgJ1NpbVBMLTIuMCdcbiAgfCAnU2xlZXB5Y2F0J1xuICB8ICdTVU5QdWJsaWMtMS4wJ1xuICB8ICdTeWJhc2UtMS4wJ1xuICB8ICdVb0ktTkNTQSdcbiAgfCAnSVUtRXh0cmVtZS0xLjEuMSdcbiAgfCAnVm92aWRhUEwtMS4wJ1xuICB8ICdXM0MnXG4gIHwgJ3d4V2luZG93cydcbiAgfCAnWG5ldCdcbiAgfCAnWlBMLTIuMCdcbiAgfCAnWkxJQidcbiAgfCAnQ29kZWhhdXMnXG4gIHwgJ1RNYXRlJ1xuICB8ICdXVEZQTCdcbiAgfCAnQ1BPTCdcbiAgfCAnQ1BPTC0xLjAyJ1xuICB8ICdCU0QgMi1DbGF1c2UnXG4gIHwgJ01QTC0yLjAnXG4gIHwgJ0dvJ1xuICB8ICdTY2FsYSdcbiAgfCAnVW5saWNlbnNlJ1xuICB8ICdOVW5pdC1UZXN0LUFkYXB0ZXItMi42LjMnXG4gIHwgJ05Vbml0LTIuNi4zJ1xuICB8ICdCU0QgU2ltcGxpZmllZCdcbiAgfCAnQlNEIE5ldydcbiAgfCAnQ0MwLTEuMCdcbiAgfCAnQ0RETC0xLjEnXG4gIHwgJ09wZW5TU0wnXG4gIHwgJ0FHUEwtVjMnXG4gIHwgJ0FwYWNoZS0xLjEnXG4gIHwgJ0FQU0wtMi4wJ1xuICB8ICdBcnRpc3RpYy1MaWNlbnNlLTIuMCdcbiAgfCAnQ1VBT0ZGSUNFLTEuMCdcbiAgfCAnSGlzdG9yaWNhbCdcbiAgfCAnTVMtUkwnXG4gIHwgJ0dQTC0yLjAnXG4gIHwgJ0dQTC0zLjAnXG4gIHwgJ01vemlsbGEtMS4xJ1xuICB8ICdPU0wtMy4wJ1xuICB8ICdSUEwtMS41J1xuICB8ICdCU0QgMy1DbGF1c2UnXG4gIHwgJ09wZW5MREFQJ1xuICB8ICdDb3B5ZnJlZSdcbiAgfCAnQ2VDSUxMLTEnXG4gIHwgJ0ZhY2Vib29rLVBsYXRmb3JtJ1xuICB8ICdWSU0gTGljZW5zZSdcbiAgfCAnTFBQTC0xLjAnXG4gIHwgJ0FGTC0yLjEnXG4gIHwgJ0xpYnBuZydcbiAgfCAnRVBMLTIuMCdcbiAgfCAnVW5pY29kZS1ERlMtMjAxNSdcbiAgfCAnTEdQTC0yLjAnXG4gIHwgJ0VVUEwtMS4yJ1xuICB8ICdJSkcnXG4gIHwgJ05DU0EnXG4gIHwgJ1VQTC0xLjAnXG4gIHwgJ0ltYWdlTWFnaWNrJ1xuICB8ICdHUEwtMy4wLW9ubHknXG4gIHwgJ0dQTC0zLjAtb3ItbGF0ZXInXG4iXX0=