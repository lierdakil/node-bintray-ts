"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("util");
const fs_1 = require("fs");
const util_2 = require("./util");
const hasAttrs_1 = require("./hasAttrs");
const path_1 = require("path");
class Version extends hasAttrs_1.HasAttrs {
    constructor(subject, repo, pkg, version, rest) {
        super(`/packages/${subject}/${repo}/${pkg}/versions`, version, rest);
        this.publishContent = async () => this.rest.postOK(`${this.contentBase}/publish`, {
            discard: false,
        });
        this.discardContent = async () => this.rest.postOK(`${this.contentBase}/publish`, {
            discard: true,
        });
        this.uploadContent = async (filePath, remotePath = path_1.basename(filePath), publish = false, explode = false) => this.uploadContentBuffer(await util_1.promisify(fs_1.readFile)(filePath), remotePath, publish, explode);
        this.uploadContentBuffer = async (data, remotePath, publish = false, explode = false) => this.rest.put(`${this.contentBase}/${remotePath}?${util_2.queryStr({ publish, explode })}`, data);
        this.contentBase = `/content/${subject}/${repo}/${pkg}/${version}`;
    }
}
exports.Version = Version;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9iaW50cmF5L3ZlcnNpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSwrQkFBZ0M7QUFDaEMsMkJBQTZCO0FBRTdCLGlDQUFpQztBQUNqQyx5Q0FBcUM7QUFDckMsK0JBQStCO0FBOEIvQixNQUFhLE9BQVEsU0FBUSxtQkFBa0M7SUFFN0QsWUFDRSxPQUFlLEVBQ2YsSUFBWSxFQUNaLEdBQVcsRUFDWCxPQUFlLEVBQ2YsSUFBVTtRQUVWLEtBQUssQ0FBQyxhQUFhLE9BQU8sSUFBSSxJQUFJLElBQUksR0FBRyxXQUFXLEVBQUUsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFBO1FBRy9ELG1CQUFjLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxVQUFVLEVBQUU7WUFDOUMsT0FBTyxFQUFFLEtBQUs7U0FDZixDQUVDLENBQUE7UUFDRyxtQkFBYyxHQUFHLEtBQUssSUFBSSxFQUFFLENBQ2pDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFdBQVcsVUFBVSxFQUFFO1lBQzlDLE9BQU8sRUFBRSxJQUFJO1NBQ2QsQ0FFQyxDQUFBO1FBQ0csa0JBQWEsR0FBRyxLQUFLLEVBQzFCLFFBQWdCLEVBQ2hCLGFBQXFCLGVBQVEsQ0FBQyxRQUFRLENBQUMsRUFDdkMsVUFBbUIsS0FBSyxFQUN4QixVQUFtQixLQUFLLEVBQ3hCLEVBQUUsQ0FDRixJQUFJLENBQUMsbUJBQW1CLENBQ3RCLE1BQU0sZ0JBQVMsQ0FBQyxhQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFDbkMsVUFBVSxFQUNWLE9BQU8sRUFDUCxPQUFPLENBQ1IsQ0FBQTtRQUNJLHdCQUFtQixHQUFHLEtBQUssRUFDaEMsSUFBNEMsRUFDNUMsVUFBa0IsRUFDbEIsVUFBbUIsS0FBSyxFQUN4QixVQUFtQixLQUFLLEVBQ3hCLEVBQUUsQ0FDRixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FDWCxHQUFHLElBQUksQ0FBQyxXQUFXLElBQUksVUFBVSxJQUFJLGVBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsQ0FBQyxFQUFFLEVBQ3JFLElBQUksQ0FDTCxDQUFBO1FBbkNELElBQUksQ0FBQyxXQUFXLEdBQUcsWUFBWSxPQUFPLElBQUksSUFBSSxJQUFJLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQTtJQUNwRSxDQUFDO0NBbUNGO0FBOUNELDBCQThDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlc3QgfSBmcm9tICcuL3Jlc3QnXG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJ1xuaW1wb3J0IHsgcmVhZEZpbGUgfSBmcm9tICdmcydcbmltcG9ydCB7IFN0cmVhbSB9IGZyb20gJ3N0cmVhbSdcbmltcG9ydCB7IHF1ZXJ5U3RyIH0gZnJvbSAnLi91dGlsJ1xuaW1wb3J0IHsgSGFzQXR0cnMgfSBmcm9tICcuL2hhc0F0dHJzJ1xuaW1wb3J0IHsgYmFzZW5hbWUgfSBmcm9tICdwYXRoJ1xuXG5leHBvcnQgaW50ZXJmYWNlIFZlcnNpb25EYXRhIHtcbiAgbmFtZTogc3RyaW5nXG4gIGRlc2M/OiBzdHJpbmdcbiAgcmVsZWFzZWQ/OiBzdHJpbmcgLy8gSVNPODYwMSAoeXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU1opXG4gIGdpdGh1Yl9yZWxlYXNlX25vdGVzX2ZpbGU/OiBzdHJpbmdcbiAgZ2l0aHViX3VzZV90YWdfcmVsZWFzZV9ub3Rlcz86IGJvb2xlYW5cbiAgdmNzX3RhZz86IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZlcnNpb25JbmZvIHtcbiAgbmFtZTogc3RyaW5nXG4gIGRlc2M6IHN0cmluZ1xuICBwYWNrYWdlOiBzdHJpbmdcbiAgcmVwbzogc3RyaW5nXG4gIG93bmVyOiBzdHJpbmdcbiAgbGFiZWxzOiBzdHJpbmdbXVxuICBwdWJsaXNoZWQ6IGJvb2xlYW5cbiAgYXR0cmlidXRlX25hbWVzOiBzdHJpbmdbXVxuICBjcmVhdGVkOiBzdHJpbmcgLy8gSVNPIGRhdGVcbiAgdXBkYXRlZDogc3RyaW5nIC8vIElTTyBkYXRlXG4gIHJlbGVhc2VkOiBzdHJpbmdcbiAgb3JkaW5hbDogbnVtYmVyXG4gIGdpdGh1Yl9yZWxlYXNlX25vdGVzX2ZpbGU6IHN0cmluZyB8IG51bGxcbiAgZ2l0aHViX3VzZV90YWdfcmVsZWFzZV9ub3RlczogYm9vbGVhblxuICB2Y3NfdGFnOiBzdHJpbmcgfCBudWxsXG4gIHJhdGluZ19jb3VudDogbnVtYmVyXG59XG5cbmV4cG9ydCBjbGFzcyBWZXJzaW9uIGV4dGVuZHMgSGFzQXR0cnM8VmVyc2lvbkluZm8sIFZlcnNpb25EYXRhPiB7XG4gIHByaXZhdGUgY29udGVudEJhc2U6IHN0cmluZ1xuICBjb25zdHJ1Y3RvcihcbiAgICBzdWJqZWN0OiBzdHJpbmcsXG4gICAgcmVwbzogc3RyaW5nLFxuICAgIHBrZzogc3RyaW5nLFxuICAgIHZlcnNpb246IHN0cmluZyxcbiAgICByZXN0OiBSZXN0LFxuICApIHtcbiAgICBzdXBlcihgL3BhY2thZ2VzLyR7c3ViamVjdH0vJHtyZXBvfS8ke3BrZ30vdmVyc2lvbnNgLCB2ZXJzaW9uLCByZXN0KVxuICAgIHRoaXMuY29udGVudEJhc2UgPSBgL2NvbnRlbnQvJHtzdWJqZWN0fS8ke3JlcG99LyR7cGtnfS8ke3ZlcnNpb259YFxuICB9XG4gIHB1YmxpYyBwdWJsaXNoQ29udGVudCA9IGFzeW5jICgpID0+XG4gICAgdGhpcy5yZXN0LnBvc3RPSyhgJHt0aGlzLmNvbnRlbnRCYXNlfS9wdWJsaXNoYCwge1xuICAgICAgZGlzY2FyZDogZmFsc2UsXG4gICAgfSkgYXMgUHJvbWlzZTx7XG4gICAgICBmaWxlczogbnVtYmVyXG4gICAgfT5cbiAgcHVibGljIGRpc2NhcmRDb250ZW50ID0gYXN5bmMgKCkgPT5cbiAgICB0aGlzLnJlc3QucG9zdE9LKGAke3RoaXMuY29udGVudEJhc2V9L3B1Ymxpc2hgLCB7XG4gICAgICBkaXNjYXJkOiB0cnVlLFxuICAgIH0pIGFzIFByb21pc2U8e1xuICAgICAgZmlsZXM6IG51bWJlclxuICAgIH0+XG4gIHB1YmxpYyB1cGxvYWRDb250ZW50ID0gYXN5bmMgKFxuICAgIGZpbGVQYXRoOiBzdHJpbmcsXG4gICAgcmVtb3RlUGF0aDogc3RyaW5nID0gYmFzZW5hbWUoZmlsZVBhdGgpLFxuICAgIHB1Ymxpc2g6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICBleHBsb2RlOiBib29sZWFuID0gZmFsc2UsXG4gICkgPT5cbiAgICB0aGlzLnVwbG9hZENvbnRlbnRCdWZmZXIoXG4gICAgICBhd2FpdCBwcm9taXNpZnkocmVhZEZpbGUpKGZpbGVQYXRoKSxcbiAgICAgIHJlbW90ZVBhdGgsXG4gICAgICBwdWJsaXNoLFxuICAgICAgZXhwbG9kZSxcbiAgICApXG4gIHB1YmxpYyB1cGxvYWRDb250ZW50QnVmZmVyID0gYXN5bmMgKFxuICAgIGRhdGE6IHN0cmluZyB8IEFycmF5QnVmZmVyIHwgQnVmZmVyIHwgU3RyZWFtLFxuICAgIHJlbW90ZVBhdGg6IHN0cmluZyxcbiAgICBwdWJsaXNoOiBib29sZWFuID0gZmFsc2UsXG4gICAgZXhwbG9kZTogYm9vbGVhbiA9IGZhbHNlLFxuICApID0+XG4gICAgdGhpcy5yZXN0LnB1dChcbiAgICAgIGAke3RoaXMuY29udGVudEJhc2V9LyR7cmVtb3RlUGF0aH0/JHtxdWVyeVN0cih7IHB1Ymxpc2gsIGV4cGxvZGUgfSl9YCxcbiAgICAgIGRhdGEsXG4gICAgKVxufVxuIl19